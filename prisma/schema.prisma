generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  profileImage String?
  firstname    String
  lastname     String
  username     String     @unique
  role         Role       @default(MEMBRO)
  articles     Article[]
  courses      Course[]
  blogs        Blog[]
  materials    Material[]
  password     String
  refreshToken String?
}

model Article {
  id         Int         @id @default(autoincrement())
  author     User        @relation(fields: [authorId], references: [id])
  authorId   Int
  title      String
  text       String
  image      String?
  references Reference[]
  tags       Tag[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Reference {
  id        Int      @id @default(autoincrement())
  name      String
  Article   Article? @relation(fields: [articleId], references: [id])
  articleId Int?
}

model Tag {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  Article    Article?  @relation(fields: [articleId], references: [id])
  articleId  Int?
  Blog       Blog?     @relation(fields: [blogId], references: [id])
  blogId     Int?
  Material   Material? @relation(fields: [materialId], references: [id])
  materialId Int?
  Course     Course?   @relation(fields: [courseId], references: [id])
  courseId   Int?
}

model Blog {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  title     String
  text      String
  image     String?
  tags      Tag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Material {
  id          Int      @id @default(autoincrement())
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  title       String
  file        String
  description String
  image       String?
  tags        Tag[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Course {
  id          Int      @id @default(autoincrement())
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  title       String
  description String
  link        String
  image       String?
  tags        Tag[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FAQ {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
}

model Curriculum {
  id           Int               @id @default(autoincrement())
  firstname    String
  lastname     String
  jobTitle     String
  credential   String
  profileImage String
  fields       Field[]
  contactInfo  ContactInfoItem[]
  singleton    Boolean           @unique @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model Field {
  id           Int         @id @default(autoincrement())
  title        String
  items        String[]
  curriculum   Curriculum? @relation(fields: [curriculumId], references: [id])
  curriculumId Int?
}

model ContactInfoItem {
  id           Int        @id @default(autoincrement())
  label        String
  link         String
  platform     String
  contactInfo  Curriculum @relation(fields: [curriculumId], references: [id])
  curriculumId Int
}

model InboxMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String?
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum Role {
  MEMBRO
  EDITOR
  CHEFE
}
