// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  profileImage String?
  firstname    String
  lastname     String
  username     String  @unique
  role         Role    @default(MEMBRO)
  posts        Post[]
  password     String
  refreshToken String?
}

model Post {
  id         Int          @id @default(autoincrement())
  category   PostCategory @default(BLOG)
  author     User         @relation(fields: [authorId], references: [id])
  authorId   Int
  title      String
  text       String
  image      String
  references String[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Curriculum {
  id               Int             @id @default(autoincrement())
  firstname        String
  lastname         String
  jobTitle         String
  credential       String
  profileImage     String
  contactInfo      ContactInfo?    @relation(fields: [contactInfoId], references: [id])
  contactInfoId    Int?            @unique
  academicInfo     AcademicInfo?   @relation(fields: [academicInfoId], references: [id])
  academicInfoId   Int?            @unique
  teachingInfo     TeachingInfo?   @relation(fields: [teachingInfoId], references: [id])
  teachingInfoId   Int?            @unique
  experienceInfo   ExperienceInfo? @relation(fields: [experienceInfoId], references: [id])
  experienceInfoId Int?            @unique
  singleton        Boolean         @unique @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model ContactInfo {
  id         Int               @id @default(autoincrement())
  title      String
  items      ContactInfoItem[]
  singleton  Boolean           @unique @default(true)
  curriculum Curriculum?
}

model ContactInfoItem {
  id            Int         @id @default(autoincrement())
  label         String
  link          String
  platform      String?
  contactInfo   ContactInfo @relation(fields: [contactInfoId], references: [id])
  contactInfoId Int
}

model AcademicInfo {
  id         Int                @id @default(autoincrement())
  title      String
  items      AcademicInfoItem[]
  singleton  Boolean            @unique @default(true)
  curriculum Curriculum?
}

model AcademicInfoItem {
  id             Int          @id @default(autoincrement())
  description    String
  academicInfo   AcademicInfo @relation(fields: [academicInfoId], references: [id])
  academicInfoId Int
}

model TeachingInfo {
  id         Int                @id @default(autoincrement())
  title      String
  items      TeachingInfoItem[]
  singleton  Boolean            @unique @default(true)
  curriculum Curriculum?
}

model TeachingInfoItem {
  id             Int          @id @default(autoincrement())
  description    String
  teachingInfo   TeachingInfo @relation(fields: [teachingInfoId], references: [id])
  teachingInfoId Int
}

model ExperienceInfo {
  id         Int                  @id @default(autoincrement())
  title      String
  items      ExperienceInfoItem[]
  singleton  Boolean              @unique @default(true)
  curriculum Curriculum?
}

model ExperienceInfoItem {
  id               Int            @id @default(autoincrement())
  description      String
  experienceInfo   ExperienceInfo @relation(fields: [experienceInfoId], references: [id])
  experienceInfoId Int
}

model InboxMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String?
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum PostCategory {
  BLOG
  ARTIGO
}

enum Role {
  MEMBRO
  EDITOR
  CHEFE
}
